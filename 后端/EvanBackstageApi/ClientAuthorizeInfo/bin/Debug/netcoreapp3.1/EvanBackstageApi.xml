<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EvanBackstageApi</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:EvanBackstageApi.Basic.ExpressionExtensions" -->
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.True``1">
            <summary>
            创建一个值恒为 <c>true</c> 的表达式。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <returns>一个值恒为 <c>true</c> 的表达式。</returns>
        </member>
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.False``1">
            <summary>
            创建一个值恒为 <c>false</c> 的表达式。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <returns>一个值恒为 <c>false</c> 的表达式。</returns>
        </member>
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            使用 Expression.OrElse 的方式拼接两个 System.Linq.Expression。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <param name="left">左边的 System.Linq.Expression 。</param>
            <param name="right">右边的 System.Linq.Expression。</param>
            <returns>拼接完成的 System.Linq.Expression。</returns>
        </member>
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            使用 Expression.AndAlso 的方式拼接两个 System.Linq.Expression。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <param name="left">左边的 System.Linq.Expression 。</param>
            <param name="right">右边的 System.Linq.Expression。</param>
            <returns>拼接完成的 System.Linq.Expression。</returns>
        </member>
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.MakeBinary``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            使用自定义的方式拼接两个 System.Linq.Expression。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <param name="left">左边的 System.Linq.Expression 。</param>
            <param name="right">右边的 System.Linq.Expression。</param>
            <param name="func"> </param>
            <returns>拼接完成的 System.Linq.Expression。</returns>
        </member>
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.MakeBinary(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            拼接两个 <paramref>
                   <name>System.Linq.Expression</name>
                 </paramref>  ，两个 <paramref>
                                    <name>System.Linq.Expression</name>
                                  </paramref>  的参数必须完全相同。
            </summary>
            <param name="left">左边的 <paramref>
                                     <name>System.Linq.Expression</name>
                                   </paramref> </param>
            <param name="right">右边的 <paramref>
                                      <name>System.Linq.Expression</name>
                                    </paramref> </param>
            <param name="func">表达式拼接的具体逻辑</param>
            <returns>拼接完成的 <paramref>
                             <name>System.Linq.Expression</name>
                           </paramref> </returns>
        </member>
        <member name="M:EvanBackstageApi.Basic.ExpressionExtensions.Combinate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            合并参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:EvanBackstageApi.Basic.ResultType.Info">
            <summary>
            消息结果类型
            </summary>
        </member>
        <member name="F:EvanBackstageApi.Basic.ResultType.Success">
            <summary>
            成功结果类型
            </summary>
        </member>
        <member name="F:EvanBackstageApi.Basic.ResultType.Warning">
            <summary>
            警告结果类型
            </summary>        
        </member>
        <member name="F:EvanBackstageApi.Basic.ResultType.Error">
            <summary>
            异常结果类型
            </summary>
        </member>
        <member name="F:EvanBackstageApi.Basic.ResultType.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="T:EvanBackstageApi.Basic.ResultModel`1">
            <summary>
            通过消息返回类型
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="P:EvanBackstageApi.Basic.ResultModel`1.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:EvanBackstageApi.Basic.ResultModel`1.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:EvanBackstageApi.Basic.ResultModel`1.Data">
            <summary>
            返回数据 
            </summary>
        </member>
        <member name="P:EvanBackstageApi.Basic.ResultModel`1.Error">
            <summary>
            错误对象
            </summary>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.CompaniesController.Add(System.Collections.Generic.List{EvanBackstageApi.Entity.CEG.Company})">
            <summary>
            添加公司 或者其下的员工
            </summary>
            <param name="Companies"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EvanBackstageApi.Controllers.CEGC.CompaniesController.GetCompaniesEmployeeInfo(System.Int32,System.Int32)" -->
        <member name="M:EvanBackstageApi.Controllers.CEGC.CompaniesController.GetCompanies(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            获取所有公司，根据名称模糊查询相关公司
            </summary>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.CompaniesController.Delete(System.Guid[])">
            <summary>
            根据公司id删除 公司和其下的员工
            </summary>
            <param name="CompanyIds"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.CompaniesController.Update(EvanBackstageApi.Entity.CEG.Company)">
            <summary>
            编辑数据
            </summary>
            <param name="company"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.CompaniesController.UpdateId(System.Guid)">
            <summary>
            查询指定的数据
            </summary>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.EmployeesController.GetEmployees(System.Int32,System.Int32,System.String)">
            <summary>
            查询所有员工人员
            </summary>
            <param name="pageSize"></param>
            <param name="pageindex"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.EmployeesController.Delete(System.Guid[])">
            <summary>
            更具id删除员工（支持批量删除）
            </summary>
            <param name="EmployeeIds"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.EmployeesController.Update(EvanBackstageApi.Entity.CEG.Employee)">
            <summary>
            编辑数据
            </summary>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.EmployeesController.EcompanyInfo(System.Guid)">
            <summary>
            根据id查询所在该员工所在的公司
            </summary>
            <param name="employeeid"></param>
            <returns></returns>
        </member>
        <member name="M:EvanBackstageApi.Controllers.CEGC.EmployeesController.Add(System.Collections.Generic.List{EvanBackstageApi.Entity.CEG.Employee})">
            <summary>
            添加员工
            </summary>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="T:EvanBackstageApi.Controllers.IdentityController">
            <summary>
            只用于判断accessToken bearjwt是否还有效，如果无效需要重新刷新token了 不要请求
            </summary>
        </member>
        <member name="T:EvanBackstageApi.Controllers.LoginUserInfoController">
            <summary>
            单独处理不走仓储,客户登陆接口信息查看，限死
            </summary>
        </member>
        <member name="M:EvanBackstageApi.Controllers.LoginUserInfoController.GetLoginInfo(System.Int32,System.Int32,System.String)">
            <summary>
            查看所有登陆信息记录
            </summary>
            <returns></returns>
        </member>
        <member name="T:EvanBackstageApi.EvanMiddleware">
            <summary>
            自定义中间件判断是否登陆到授权服务器，全局
            </summary>
        </member>
    </members>
</doc>
